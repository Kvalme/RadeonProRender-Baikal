#version 450

#include "common.glsl"

#define TILE_SIZE 8

int numSamples = 1024;

layout (local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;
layout (binding = 0, rgba16f) uniform imageCube env_map_mips[11];
layout (binding = 1) uniform samplerCube env_map;
layout (binding = 2, rgba16f) uniform imageCube prefiltered_env_map;

struct PushConstsStruct
{
    int mip;
    int max_mips;
    float roughness;
};

layout(push_constant) uniform PushConsts
{
    PushConstsStruct data;
} push_consts;

vec3 MapXYSToDirection(uint x, uint y, uint s, int width, int height)
{
    float u = ((x + 0.5f) / float(width)) * 2.0f - 1.0f;
    float v = ((y + 0.5f) / float(height)) * 2.0f - 1.0f;
    v *= -1.0f;

    vec3 dir = vec3(0.0f);

    switch(s) {
    case 0:
        dir = normalize(vec3(1.0f, v, -u));
        break;
    case 1:
        dir = normalize(vec3(-1.0f, v, u));
        break;
    case 2:
        dir = normalize(vec3(u, 1.0f, -v));
        break;
    case 3:
        dir = normalize(vec3(u, -1.0f, v));
        break;
    case 4:
        dir = normalize(vec3(u, v, 1.0f));
        break;
    case 5:
        dir = normalize(vec3(-u, v, -1.0f));
        break;
    }

    return dir;
}

// Based on http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/
float random(vec2 co)
{
	float a = 12.9898;
	float b = 78.233;
	float c = 43758.5453;
	float dt= dot(co.xy ,vec2(a,b));
	float sn= mod(dt,3.14);
	return fract(sin(sn) * c);
}

vec2 hammersley2d(uint i, uint N) 
{
	// Radical inverse based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
	uint bits = (i << 16u) | (i >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	float rdi = float(bits) * 2.3283064365386963e-10;
	return vec2(float(i) /float(N), rdi);
}

// Based on http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_slides.pdf
vec3 importanceSample_GGX(vec2 Xi, float roughness, vec3 normal) 
{
	// Maps a 2D point to a hemisphere with spread based on roughness
	float alpha = roughness * roughness;
	float phi = 2.0 * PI * Xi.x + random(normal.xz) * 0.1;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha*alpha - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);

	// Tangent space
	vec3 up = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangentX = normalize(cross(up, normal));
	vec3 tangentY = normalize(cross(normal, tangentX));

	// Convert to world Space
	return normalize(tangentX * H.x + tangentY * H.y + normal * H.z);
}

float DTerm_GGX(float roughness, float NdotH)
{
    float roughness2 = roughness * roughness;
    float v = (NdotH * NdotH * (roughness2 - 1) + 1);
    return roughness2 / (PI * v * v);
}

vec3 prefilterEnvMap(vec3 R, float roughness)
{
	vec3 N = R;
	vec3 V = R;
	vec3 color = vec3(0.0);
	float totalWeight = 0.0;
	float envMapDim = float(imageSize(env_map_mips[0]).s);

	for(uint i = 0u; i < numSamples; i++) {
		vec2 Xi = hammersley2d(i, numSamples);
		vec3 H = importanceSample_GGX(Xi, roughness, N);
		vec3 L = 2.0 * dot(V, H) * H - V;
		float dotNL = clamp(dot(N, L), 0.0, 1.0);
		if(dotNL > 0.0) {
			// Filtering based on https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/

			float dotNH = clamp(dot(N, H), 0.0, 1.0);
			float dotVH = clamp(dot(V, H), 0.0, 1.0);

			// Probability Distribution Function
			float pdf = DTerm_GGX(dotNH, roughness) * dotNH / (4.0 * dotVH) + 0.0001;
			// Slid angle of current smple
			float omegaS = 1.0 / (float(numSamples) * pdf);
			// Solid angle of 1 pixel across all cube faces
			float omegaP = 4.0 * PI / (6.0 * envMapDim * envMapDim);
			// Biased (+1.0) mip level for better result
			float mipLevel = roughness == 0.0 ? 0.0 : max(0.5 * log2(omegaS / omegaP) + 1.0, 0.0f);
            mipLevel = clamp(mipLevel, 0.0f, push_consts.data.max_mips);
            color += textureLod(env_map, L, mipLevel).rgb * dotNL;

			totalWeight += dotNL;

		}
	}
	return (color / totalWeight);
}

void main() 
{
    uint mip = push_consts.data.mip;

    ivec2 size = imageSize(env_map_mips[mip]);
    int num_pixels = size.x * size.y;

    const uint x = gl_GlobalInvocationID.x;
    const uint y = gl_GlobalInvocationID.y;
    const uint face = gl_GlobalInvocationID.z;

    vec3 s = (x >= size.x || y >= size.y) ? vec3(0.f) : imageLoad(env_map_mips[mip], ivec3(x, y, face)).rgb;

    float u = (x + 0.5f) / size.x;
    float v = (y + 0.5f) / size.y;

    u = u * 2.0f - 1.0f;
    v = v * 2.0f - 1.0f;

    const float temp = 1.0f + u * u + v * v;
    const float weight = 4.0f / (sqrt(temp) * temp);

    vec3 dir = MapXYSToDirection(x, y, face, size.x, size.y);
    vec3 data = prefilterEnvMap(dir, push_consts.data.roughness);

    imageStore(prefiltered_env_map, ivec3(x, y, face), vec4(data, 1));
}